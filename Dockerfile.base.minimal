# Conservative Base Image - Only essential packages that are guaranteed to exist
FROM ruby:3.3.0-alpine

LABEL maintainer="your-email@example.com"
LABEL description="Minimal Ruby Rails base image with essential dependencies"
LABEL version="1.0"

# Install only essential packages in groups to identify any issues
RUN apk update --no-cache && apk upgrade --no-cache

# Core build tools
RUN apk add --no-cache \
    build-base \
    gcc \
    g++ \
    make \
    musl-dev \
    linux-headers \
    pkgconfig

# Network and crypto
RUN apk add --no-cache \
    curl \
    curl-dev \
    openssl-dev \
    ca-certificates \
    wget

# Version control and utilities
RUN apk add --no-cache \
    git \
    bash \
    tzdata \
    unzip \
    file

# Database essentials
RUN apk add --no-cache \
    postgresql-client \
    postgresql-dev \
    libpq-dev \
    sqlite \
    sqlite-dev

# Image processing essentials
RUN apk add --no-cache \
    imagemagick \
    imagemagick-dev \
    libjpeg-turbo \
    freetype \
    freetype-dev

# JavaScript runtime
RUN apk add --no-cache \
    nodejs \
    npm \
    yarn

# Performance and process management
RUN apk add --no-cache \
    libgomp \
    dumb-init

# Try to add mimalloc (might not be available in all Alpine versions)
RUN apk add --no-cache mimalloc2 mimalloc2-dev || \
    echo "mimalloc not available, skipping..."

# Development libraries
RUN apk add --no-cache \
    libxml2-dev \
    libxslt-dev \
    zlib-dev \
    libffi-dev \
    yaml-dev

# Python for native extensions
RUN apk add --no-cache \
    python3 \
    python3-dev

# Clean up
RUN rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# Pre-configure Ruby environment
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV RUBY_YJIT_ENABLE=1
ENV MALLOC_ARENA_MAX=2

# Only set mimalloc if it was successfully installed
RUN if [ -f /usr/lib/libmimalloc.so.* ]; then \
        echo "export LD_PRELOAD=\$(ls /usr/lib/libmimalloc.so.* | head -1)" >> /etc/profile; \
    fi

# Pre-configure Bundler
RUN gem update --system && \
    gem install bundler -v 2.6.5 --no-document && \
    bundle config set --global jobs $(nproc) && \
    bundle config set --global retry 3 && \
    bundle config set --global timeout 30

# Pre-install most common Rails gems
RUN gem install --no-document \
    rails \
    pg \
    puma \
    bootsnap

# Create common directories
RUN mkdir -p /app /tmp/rails && \
    chmod 755 /app /tmp/rails

WORKDIR /app

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD echo "Base image healthy" || exit 1

CMD ["/bin/bash"]